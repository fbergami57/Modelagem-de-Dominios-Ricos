Modelagem de domínios Ricos
===========================
Objetivos do curso
--DDD
--SOLID
--.NET
--C#
--CQRS
--Soft Design Paterns
--OOP
===========================
Não iremos aprender nenhuma receita pronta!
Fundamentos da modelagem baseada em building blocks.
Toda necessidade merece uma abordagem precisa e desenvolvida sob medida.
===========================
Visão Geral do DDD
--------------------------
- Como faço para persistir uma entidade com Entity framwork no DDD?

- Como faço para popular um DropDownList seguindo o padrão DDD?

- Estou criando um back-end em WebAPI + DDD

- Onde coloco uma camada de cache num projeto DDD?
--------------------------
- DDD não é arquitetura em camadas
	--DDD não é uma receita pronta sobre como desenvolver uma arquitetura baseada em camadas do tipo:
		---Presentation
		---Services
		---Application
		---Domain
		---Infra
-------------------------
Domain Driven Design - DDD		
	--O DDD é uma abordagem de modelagem de software com foco na complexidade da aplicação.
	--Através do conhecimento do domínio é possível facilitar a implementação de complexas regras / processos de negócio.
	--Domain-Driven-Design é sobre design.
	--Design guiado pelo conhecimento do domínio. "Toda arquitetura é design, mas nem todo design é arquitetura"
	"Toda arquitetura é design, mas nem todo design é arquitetura" - Grady Booch
--------------------------
Quando devo implementar o DDD?
- Você precisa ter conhecimento suficiente por conta própria se deve implementar DDD ou não.
- Caso não esteja conseguindo identificar.Não implemente.
https://www.eduardopires.net.br/2016/08/ddd-nao-e-arquitetura-em-camadas/
Big Ball of Mud
--Impossível Gerenciar
---Grande bola de lama, indica um anti-padrão para arquitetos e desenvolvedores e refere-se a um software que possui todos os "problemas" que resultam em um código difícil de entender, manter e estender
----------------------------
Como o DDD poderia resolver?
--Capturar elementos conhecidos do negócio
--Organizá-los em um conjunto de princípios
--Criar uma modelagem de domínio com foco no desenvolvimento
--Abordagem diferenciada para desenvolver a regra de negócio
----------------------------
Visão Global do DDD
Eric Evans - ler o livro Domain Driven Design
introduzido em 2003
Pontos Chave do DDD:
--Linguagem Ubiqua - Ubiquitous Language
--Contexto delimitado - Bounded Context
--Mapa de Contexto - Context Map

O que é o DDD no sentido de aplicação
--Entender o processos
--Extrair a linguagem Ubiqua(pior erro deixar de extrair a linguagem Ubiqua(Domain Experts =><= Ubiquitous Language =><= Dev Team))
--Modelagem estratégica:
	---Capturar os grandes elementos e distribuir eles em dominios auxiliares, principais e genéricos
--Mapa de Contexto
--Definir a Arquitetura dos contextos
--Modelagem Tática
============================
Linguagem Ubiqua - Ubiquitous Language
--Vocabulário de todos os termos específicos do domínio
	---Nomes, verbos, adjetivos, jargões, apelidos, expressões, idiomáticas e advérbios
--Compartilhado por todas as partes envolvidas no projeto
	---Primeiro passo para evitar desentimentos
--Usadas em todas as formas faladas e escritas de uma comunicação
	---A linguagem universal de um negócio é feita dentro da empresa
Primeiro passo para garantir a modelagem é ter os termos e garantir que esses termos significam a mesma coisa

Como gerenciar a linguagem ubiqua
--Como gerenciar?
	---Listar termos uytilizados salvos em documentos
	---Time de desenvolvimento responsável não o Domain Expert
	---Atualização constante
	
Dicas essênciais
--Security
--Cache
--Database
--Logging
	public class SinistroRepository(Repository é um termo técnico)
	{
		
	}

	---Domain Experts
	---Ubiquitous Language
	---Dev Team
--Contratar ou Escalar um Domain Expert(essencial)
--Lidar com siglas
	---Muito especifico
	---Dificeis de lembrar
	---Evitar se possivel
--Idioma dos termos
	---Não usar idioma diferente da empresa
	Ex: 
	public class SinistroRepository
	{
		public void GetSinistroById(int id){}
		public void ObterSinistroPorId(int id){} = correto
		
		public void GerarRelatorioFrancesinha() {}
		
		public void GerarRelatorioSinteticoAnalitico() {}
	}
--Sincronizar com código fonte

--Onde é indispensável o uso da UL?
--Muitas definições difíceis de entender
	---Garantir que todos os termos estão muito claros
	---Nenhum outro termo é usado para indicar comportamento semelhante
--A lógica de negócio não está 100% definida
	---O negócio é novo e está crescendo (ex: Startups)
	---O domínio será descoberto conforme o tempo
--Ubiquitous Language
	---A linguagem ubíqua pode mudar, mas não indefinidamente
============================
Modelagem Estratégica
--Context Map
	---


